{"version":3,"file":"index.mjs","sources":["../d787206d236012443393287e35ea7c","../lib/validate.js","../lib/main.js","../lib/index.js"],"sourcesContent":["export default '/home/runner/work/datasets-cmudict/datasets-cmudict/lib'","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {string} [options.data] - dataset name\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'data': 'phones'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( 'invalid argument. Options must be an object. Value: `' + options + '`.' );\n\t}\n\tif ( hasOwnProp( options, 'data' ) ) {\n\t\topts.data = options.data;\n\t\tif ( !isString( opts.data ) ) {\n\t\t\treturn new TypeError( 'invalid option. `data` option must be a string primitive. Option: `' + opts.data + '`.' );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolve = require( 'path' ).resolve;\nvar readJSON = require( '@stdlib/fs-read-json' ).sync;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar keys = [ 'dict', 'phones', 'symbols', 'vp' ];\nvar dataCMU = {\n\t'dict': resolve( __dirname, '..', 'data', 'dict.json' ),\n\t'phones': resolve( __dirname, '..', 'data', 'phones.json' ),\n\t'symbols': resolve( __dirname, '..', 'data', 'symbols.json' ),\n\t'vp': resolve( __dirname, '..', 'data', 'vp.json' )\n};\nvar fopts = {\n\t'encoding': 'utf8'\n};\n\n\n// MAIN //\n\n/**\n* Returns datasets from the Carnegie Mellon Pronouncing Dictionary (CMUdict).\n*\n* ## Notes\n*\n* -   This function synchronously reads data from disk for each invocation. Such behavior is intentional and so is the avoidance of `require`. We assume that invocations are infrequent, and we want to avoid the `require` cache. This means that we allow data to be garbage collected and a user is responsible for explicitly caching data.\n*\n*\n* @param {Options} [options] - options object\n* @param {string} [options.data] - dataset name\n* @throws {Error} unable to read data\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} must provide a recognized dataset name\n* @returns {(Object|StringArray)} dataset(s)\n*\n* @example\n* var data = cmudict();\n* // returns <Object>\n*\n* @example\n* var data = cmudict({\n*\t'data': 'symbols'\n* });\n* // returns <Array>\n*/\nfunction cmudict( options ) {\n\tvar opts;\n\tvar err;\n\tvar key;\n\tvar out;\n\tvar val;\n\tvar i;\n\n\tif ( arguments.length > 0 ) {\n\t\topts = {};\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tif ( opts.data ) {\n\t\t\tif ( !hasOwnProp( dataCMU, opts.data ) ) {\n\t\t\t\tthrow new RangeError( 'invalid option. `data` option must be one of the following values: `'+keys.join(',')+'`. Option: `'+opts.data+'`.' );\n\t\t\t}\n\t\t\tout = readJSON( dataCMU[ opts.data ], fopts );\n\t\t\tif ( out instanceof Error ) {\n\t\t\t\tthrow out;\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t}\n\tout = {};\n\tfor ( i = 0; i < keys.length; i++ ) {\n\t\tkey = keys[ i ];\n\t\tval = readJSON( dataCMU[ key ] );\n\t\tif ( val instanceof Error ) {\n\t\t\tthrow val;\n\t\t}\n\t\tout[ key ] = val;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cmudict;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* The Carnegie Mellon Pronouncing Dictionary (CMUdict).\n*\n* @module @stdlib/datasets-cmudict\n*\n* @example\n* var dict = require( '@stdlib/datasets-cmudict' );\n*\n* var data = dict();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar dict = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = dict;\n"],"names":["hasOwnProp","require$$0","isObject","require$$1","isString","require$$2","isPrimitive","validate_1","opts","options","data","TypeError","resolve","readJSON","sync","validate","require$$3","keys","dataCMU","dict","__dirname","phones","symbols","vp","fopts","encoding","lib","err","key","out","val","i","arguments","length","RangeError","join","Error"],"mappings":";kmBAAA,MAAe,olECsBXA,EAAaC,EACbC,EAAWC,EACXC,EAAWC,EAAsCC,gBAwCrDC,EAhBA,SAAmBC,EAAMC,GACxB,OAAMP,EAAUO,GAGXT,EAAYS,EAAS,UACzBD,EAAKE,KAAOD,EAAQC,MACdN,EAAUI,EAAKE,OACb,IAAIC,UAAW,sEAAwEH,EAAKE,KAAO,MAGrG,KARC,IAAIC,UAAW,wDAA0DF,EAAU,OC5BxFG,EAAUX,EAAkBW,QAC5BC,EAAWV,EAAkCW,KAC7Cd,EAAaK,EACbU,EAAWC,EAKXC,EAAO,CAAE,OAAQ,SAAU,UAAW,MACtCC,EAAU,CACbC,KAAQP,EAASQ,EAAW,KAAM,OAAQ,aAC1CC,OAAUT,EAASQ,EAAW,KAAM,OAAQ,eAC5CE,QAAWV,EAASQ,EAAW,KAAM,OAAQ,gBAC7CG,GAAMX,EAASQ,EAAW,KAAM,OAAQ,YAErCI,EAAQ,CACXC,SAAY,YCCbC,ED+BA,SAAkBjB,GACjB,IAAID,EACAmB,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKC,UAAUC,OAAS,EAAI,CAG3B,GADAN,EAAMZ,EADNP,EAAO,GACeC,GAErB,MAAMkB,EAEP,GAAKnB,EAAKE,KAAO,CAChB,IAAMV,EAAYkB,EAASV,EAAKE,MAC/B,MAAM,IAAIwB,WAAY,uEAAuEjB,EAAKkB,KAAK,KAAK,eAAe3B,EAAKE,KAAK,MAGtI,IADAmB,EAAMhB,EAAUK,EAASV,EAAKE,MAAQc,cAClBY,MACnB,MAAMP,EAEP,OAAOA,GAIT,IADAA,EAAM,GACAE,EAAI,EAAGA,EAAId,EAAKgB,OAAQF,IAAM,CAGnC,GAFAH,EAAMX,EAAMc,IACZD,EAAMjB,EAAUK,EAASU,eACLQ,MACnB,MAAMN,EAEPD,EAAKD,GAAQE,EAEd,OAAOD"}